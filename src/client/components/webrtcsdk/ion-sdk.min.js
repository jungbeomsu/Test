var IonSDK = function (g) {
  var I = {};

  function C(A) {
    if (I[A]) return I[A].exports;
    var n = I[A] = {i: A, l: !1, exports: {}};
    return g[A].call(n.exports, n, n.exports, C), n.l = !0, n.exports
  }

  return C.m = g, C.c = I, C.d = function (g, I, A) {
    C.o(g, I) || Object.defineProperty(g, I, {enumerable: !0, get: A})
  }, C.r = function (g) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(g, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(g, "__esModule", {value: !0})
  }, C.t = function (g, I) {
    if (1 & I && (g = C(g)), 8 & I) return g;
    if (4 & I && "object" == typeof g && g && g.__esModule) return g;
    var A = Object.create(null);
    if (C.r(A), Object.defineProperty(A, "default", {
      enumerable: !0,
      value: g
    }), 2 & I && "string" != typeof g) for (var n in g) C.d(A, n, function (I) {
      return g[I]
    }.bind(null, n));
    return A
  }, C.n = function (g) {
    var I = g && g.__esModule ? function () {
      return g.default
    } : function () {
      return g
    };
    return C.d(I, "a", I), I
  }, C.o = function (g, I) {
    return Object.prototype.hasOwnProperty.call(g, I)
  }, C.p = "", C(C.s = 1)
}([function (module, exports, __webpack_require__) {
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.makeRemote = exports.LocalStream = exports.VideoConstraints = void 0;\nconst resolutions = ['qvga', 'vga', 'shd', 'hd', 'fhd', 'qhd'];\nexports.VideoConstraints = {\n    qvga: {\n        resolution: {\n            width: { ideal: 320 },\n            height: { ideal: 180 },\n            frameRate: {\n                ideal: 15,\n                max: 30,\n            },\n        },\n        encodings: {\n            maxBitrate: 150000,\n            maxFramerate: 15.0,\n        },\n    },\n    vga: {\n        resolution: {\n            width: { ideal: 640 },\n            height: { ideal: 360 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 500000,\n            maxFramerate: 30.0,\n        },\n    },\n    shd: {\n        resolution: {\n            width: { ideal: 960 },\n            height: { ideal: 540 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 1200000,\n            maxFramerate: 30.0,\n        },\n    },\n    hd: {\n        resolution: {\n            width: { ideal: 1280 },\n            height: { ideal: 720 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 2500000,\n            maxFramerate: 30.0,\n        },\n    },\n    fhd: {\n        resolution: {\n            width: { ideal: 1920 },\n            height: { ideal: 1080 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 4000000,\n            maxFramerate: 30.0,\n        },\n    },\n    qhd: {\n        resolution: {\n            width: { ideal: 2560 },\n            height: { ideal: 1440 },\n            frameRate: {\n                ideal: 30,\n                max: 60,\n            },\n        },\n        encodings: {\n            maxBitrate: 8000000,\n            maxFramerate: 30.0,\n        },\n    },\n};\nconst defaults = {\n    resolution: 'hd',\n    codec: 'vp8',\n    audio: true,\n    video: true,\n    simulcast: false,\n};\nclass LocalStream extends MediaStream {\n    constructor(stream, constraints) {\n        super(stream);\n        this.constraints = constraints;\n    }\n    static async getUserMedia(constraints = defaults) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            audio: LocalStream.computeAudioConstraints({\n                ...defaults,\n                ...constraints,\n            }),\n            video: LocalStream.computeVideoConstraints({\n                ...defaults,\n                ...constraints,\n            }),\n        });\n        return new LocalStream(stream, {\n            ...defaults,\n            ...constraints,\n        });\n    }\n    static async getDisplayMedia(constraints = {\n        codec: 'vp8',\n        resolution: 'hd',\n        audio: false,\n        video: true,\n        simulcast: false,\n    }) {\n        // @ts-ignore\n        const stream = await navigator.mediaDevices.getDisplayMedia(constraints);\n        return new LocalStream(stream, {\n            ...defaults,\n            ...constraints,\n        });\n    }\n    static computeAudioConstraints(constraints) {\n        return constraints.audio;\n    }\n    static computeVideoConstraints(constraints) {\n        if (constraints.video instanceof Object) {\n            return constraints.video;\n        }\n        else if (constraints.video && constraints.resolution) {\n            return {\n                ...exports.VideoConstraints[constraints.resolution].resolution,\n            };\n        }\n        return constraints.video;\n    }\n    getTrack(kind) {\n        let tracks;\n        if (kind === 'video') {\n            tracks = this.getVideoTracks();\n            return tracks.length > 0 ? this.getVideoTracks()[0] : undefined;\n        }\n        tracks = this.getAudioTracks();\n        return tracks.length > 0 ? this.getAudioTracks()[0] : undefined;\n    }\n    async getNewTrack(kind) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n            [kind]: kind === 'video'\n                ? LocalStream.computeVideoConstraints(this.constraints)\n                : LocalStream.computeAudioConstraints(this.constraints),\n        });\n        return stream.getTracks()[0];\n    }\n    publishTrack(track) {\n        if (this.pc) {\n            if (track.kind === 'video' && this.constraints.simulcast) {\n                const idx = resolutions.indexOf(this.constraints.resolution);\n                const encodings = [\n                    {\n                        rid: 'f',\n                        maxBitrate: exports.VideoConstraints[resolutions[idx]].encodings.maxBitrate,\n                        maxFramerate: exports.VideoConstraints[resolutions[idx]].encodings.maxFramerate,\n                    },\n                ];\n                if (idx - 1 >= 0) {\n                    encodings.push({\n                        rid: 'h',\n                        scaleResolutionDownBy: 2.0,\n                        maxBitrate: exports.VideoConstraints[resolutions[idx - 1]].encodings.maxBitrate,\n                        maxFramerate: exports.VideoConstraints[resolutions[idx - 1]].encodings.maxFramerate,\n                    });\n                }\n                if (idx - 2 >= 0) {\n                    encodings.push({\n                        rid: 'q',\n                        scaleResolutionDownBy: 4.0,\n                        maxBitrate: exports.VideoConstraints[resolutions[idx - 2]].encodings.maxBitrate,\n                        maxFramerate: exports.VideoConstraints[resolutions[idx - 2]].encodings.maxFramerate,\n                    });\n                }\n                const transceiver = this.pc.addTransceiver(track, {\n                    streams: [this],\n                    direction: 'sendonly',\n                    sendEncodings: encodings,\n                });\n                this.setPreferredCodec(transceiver, track.kind);\n            }\n            else {\n                const init = {\n                    streams: [this],\n                    direction: 'sendonly',\n                };\n                if (track.kind === 'video') {\n                    init.sendEncodings = [exports.VideoConstraints[this.constraints.resolution].encodings];\n                }\n                const transceiver = this.pc.addTransceiver(track, init);\n                this.setPreferredCodec(transceiver, track.kind);\n            }\n        }\n    }\n    setPreferredCodec(transceiver, kind) {\n        if ('setCodecPreferences' in transceiver) {\n            const cap = RTCRtpSender.getCapabilities(kind);\n            if (!cap)\n                return;\n            let selCodec;\n            if (this.constraints.preferredCodecProfile && kind === 'video') {\n                const allCodecProfiles = cap.codecs.filter((c) => c.mimeType.toLowerCase() === `video/${this.constraints.codec.toLowerCase()}`);\n                if (!allCodecProfiles) {\n                    return;\n                }\n                selCodec = allCodecProfiles.find((c) => { var _a; return c.sdpFmtpLine && ((_a = c.sdpFmtpLine) === null || _a === void 0 ? void 0 : _a.indexOf(`profile-level-id=${this.constraints.preferredCodecProfile}`)) >= 0; });\n                if (!selCodec) {\n                    // get first one\n                    selCodec = allCodecProfiles[0];\n                }\n            }\n            else {\n                selCodec = cap.codecs.find((c) => c.mimeType.toLowerCase() === `video/${this.constraints.codec.toLowerCase()}` ||\n                    c.mimeType.toLowerCase() === `audio/opus`);\n            }\n            if (selCodec) {\n                transceiver.setCodecPreferences([selCodec]);\n            }\n        }\n    }\n    updateTrack(next, prev) {\n        this.addTrack(next);\n        // If published, replace published track with track from new device\n        if (prev) {\n            this.removeTrack(prev);\n            prev.stop();\n            if (this.pc) {\n                this.pc.getSenders().forEach(async (sender) => {\n                    var _a, _b;\n                    if (((_a = sender === null || sender === void 0 ? void 0 : sender.track) === null || _a === void 0 ? void 0 : _a.kind) === next.kind) {\n                        (_b = sender.track) === null || _b === void 0 ? void 0 : _b.stop();\n                        sender.replaceTrack(next);\n                    }\n                });\n            }\n        }\n        else {\n            this.addTrack(next);\n            if (this.pc) {\n                this.publishTrack(next);\n            }\n        }\n    }\n    initAudioEmptyTrack() {\n        // @ts-ignore\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        const ctx = new AudioContext();\n        const oscillator = ctx.createOscillator();\n        oscillator.frequency.setValueAtTime(20000, ctx.currentTime);\n        const dst = oscillator.connect(ctx.createMediaStreamDestination());\n        oscillator.start();\n        return dst.stream.getAudioTracks()[0];\n    }\n    initVideoEmptyTrack(width, height) {\n        var _a;\n        const canvas = Object.assign(document.createElement('canvas'), { width, height });\n        (_a = canvas.getContext('2d')) === null || _a === void 0 ? void 0 : _a.fillRect(0, 0, width, height);\n        const stream = canvas.captureStream();\n        return stream.getVideoTracks()[0];\n    }\n    publish(transport) {\n        this.pc = transport.pc;\n        this.api = transport.api;\n        this.getTracks().forEach(this.publishTrack.bind(this));\n    }\n    unpublish() {\n        if (this.pc) {\n            const tracks = this.getTracks();\n            this.pc.getSenders().forEach((s) => {\n                if (s.track && tracks.includes(s.track)) {\n                    this.pc.removeTrack(s);\n                }\n            });\n        }\n    }\n    async switchDevice(kind, deviceId) {\n        this.constraints = {\n            ...this.constraints,\n            [kind]: this.constraints[kind] instanceof Object\n                ? {\n                    ...this.constraints[kind],\n                    deviceId,\n                }\n                : { deviceId },\n        };\n        const prev = this.getTrack(kind);\n        const next = await this.getNewTrack(kind);\n        this.updateTrack(next, prev);\n    }\n    mute(kind) {\n        const track = this.getTrack(kind);\n        if (track && this.constraints.sendEmptyOnMute) {\n            const emptyTrack = kind === 'audio'\n                ? this.initAudioEmptyTrack()\n                : this.initVideoEmptyTrack((track === null || track === void 0 ? void 0 : track.getSettings().width) || 640, (track === null || track === void 0 ? void 0 : track.getSettings().height) || 360);\n            emptyTrack.enabled = false;\n            this.updateTrack(emptyTrack, track);\n            return;\n        }\n        if (track) {\n            track.stop();\n        }\n    }\n    async unmute(kind) {\n        const prev = this.getTrack(kind);\n        const track = await this.getNewTrack(kind);\n        this.updateTrack(track, prev);\n    }\n    async enableLayers(layers) {\n        const call = {\n            streamId: this.id,\n            layers,\n        };\n        const callStr = JSON.stringify(call);\n        if (this.api) {\n            if (this.api.readyState !== 'open') {\n                // queue call if we aren't open yet\n                this.api.onopen = () => { var _a; return (_a = this.api) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(call)); };\n            }\n            else {\n                this.api.send(JSON.stringify(call));\n            }\n        }\n        const layerValues = ['high', 'medium', 'low'];\n        await Promise.all(layerValues.map(async (layer) => {\n            await this.updateMediaEncodingParams({ active: layers.includes(layer) }, layer);\n        }));\n    }\n    async updateMediaEncodingParams(encodingParams, layer) {\n        var _a;\n        if (!this.pc)\n            return;\n        const tracks = this.getTracks();\n        await Promise.all((_a = this.pc) === null || _a === void 0 ? void 0 : _a.getSenders().filter((sender) => sender.track && tracks.includes(sender.track)).map(async (sender) => {\n            const params = sender.getParameters();\n            if (!params.encodings) {\n                params.encodings = [{}];\n            }\n            let idx = 0;\n            if (this.constraints.simulcast && layer) {\n                const rid = layer === 'high' ? 'f' : layer === 'medium' ? 'h' : 'q';\n                idx = params.encodings.findIndex((encoding) => encoding.rid === rid);\n                if (params.encodings.length < idx + 1)\n                    return;\n            }\n            params.encodings[idx] = {\n                ...params.encodings[idx],\n                ...encodingParams,\n            };\n            await sender.setParameters(params);\n        }));\n    }\n}\nexports.LocalStream = LocalStream;\nfunction makeRemote(stream, transport) {\n    const remote = stream;\n    remote.audio = true;\n    remote.video = 'none';\n    remote.framerate = 'high';\n    remote._videoPreMute = 'high';\n    const select = () => {\n        const call = {\n            streamId: remote.id,\n            video: remote.video,\n            audio: remote.audio,\n            framerate: remote.framerate,\n        };\n        if (transport.api) {\n            if (transport.api.readyState !== 'open') {\n                // queue call if we aren't open yet\n                transport.api.onopen = () => { var _a; return (_a = transport.api) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(call)); };\n            }\n            else {\n                transport.api.send(JSON.stringify(call));\n            }\n        }\n    };\n    remote.preferLayer = (layer) => {\n        remote.video = layer;\n        select();\n    };\n    remote.preferFramerate = (layer) => {\n        remote.framerate = layer;\n        select();\n    };\n    remote.mute = (kind) => {\n        if (kind === 'audio') {\n            remote.audio = false;\n        }\n        else if (kind === 'video') {\n            remote._videoPreMute = remote.video;\n            remote.video = 'none';\n        }\n        select();\n    };\n    remote.unmute = (kind) => {\n        if (kind === 'audio') {\n            remote.audio = true;\n        }\n        else if (kind === 'video') {\n            remote.video = remote._videoPreMute;\n        }\n        select();\n    };\n    return remote;\n}\nexports.makeRemote = makeRemote;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")
}, function (module, exports, __webpack_require__) {
  "use strict";
  eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nexports.LocalStream = exports.Client = void 0;\nconst client_1 = __webpack_require__(2);\nexports.Client = client_1.default;\nconst stream_1 = __webpack_require__(0);\nObject.defineProperty(exports, "LocalStream", { enumerable: true, get: function () { return stream_1.LocalStream; } });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Jb25TREsvLi9zcmMvaW5kZXgudHM/NzFiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsQ0FBVTtBQUNuQztBQUNBLGlCQUFpQixtQkFBTyxDQUFDLENBQVU7QUFDbkMsK0NBQStDLHFDQUFxQyw2QkFBNkIsRUFBRSxFQUFFIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9jYWxTdHJlYW0gPSBleHBvcnRzLkNsaWVudCA9IHZvaWQgMDtcbmNvbnN0IGNsaWVudF8xID0gcmVxdWlyZShcIi4vY2xpZW50XCIpO1xuZXhwb3J0cy5DbGllbnQgPSBjbGllbnRfMS5kZWZhdWx0O1xuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwiLi9zdHJlYW1cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb2NhbFN0cmVhbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RyZWFtXzEuTG9jYWxTdHJlYW07IH0gfSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')
}, function (module, exports, __webpack_require__) {
  "use strict";
  eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transport = void 0;\nconst stream_1 = __webpack_require__(0);\nconst API_CHANNEL = 'ion-sfu';\nconst ERR_NO_SESSION = 'no active session, join first';\nvar Role;\n(function (Role) {\n    Role[Role[\"pub\"] = 0] = \"pub\";\n    Role[Role[\"sub\"] = 1] = \"sub\";\n})(Role || (Role = {}));\nclass Transport {\n    constructor(role, signal, config) {\n        this.signal = signal;\n        this.pc = new RTCPeerConnection(config);\n        this.candidates = [];\n        if (role === Role.pub) {\n            this.pc.createDataChannel(API_CHANNEL);\n        }\n        this.pc.onicecandidate = ({ candidate }) => {\n            if (candidate) {\n                this.signal.trickle({ target: role, candidate });\n            }\n        };\n        this.pc.oniceconnectionstatechange = async (e) => {\n            if (this.pc.iceConnectionState === 'disconnected') {\n                if (this.pc.restartIce) {\n                    // this will trigger onNegotiationNeeded\n                    this.pc.restartIce();\n                }\n            }\n        };\n    }\n}\nexports.Transport = Transport;\nclass Client {\n    constructor(signal, config = {\n        codec: 'vp8',\n        iceServers: [\n            {\n                urls: ['stun:stun.l.google.com:19302', 'stun:stun1.l.google.com:19302'],\n            },\n        ],\n    }) {\n        this.signal = signal;\n        this.config = config;\n        signal.onnegotiate = this.negotiate.bind(this);\n        signal.ontrickle = this.trickle.bind(this);\n    }\n    async join(sid, uid, joinConfig) {\n        console.log('JOIN CALLED: ', JSON.stringify(joinConfig));\n        this.transports = {\n            [Role.pub]: new Transport(Role.pub, this.signal, this.config),\n            [Role.sub]: new Transport(Role.sub, this.signal, this.config),\n        };\n        this.transports[Role.sub].pc.ontrack = (ev) => {\n            const stream = ev.streams[0];\n            const remote = stream_1.makeRemote(stream, this.transports[Role.sub]);\n            if (this.ontrack) {\n                this.ontrack(ev.track, remote);\n            }\n        };\n        const apiReady = new Promise((resolve) => {\n            this.transports[Role.sub].pc.ondatachannel = (ev) => {\n                if (ev.channel.label === API_CHANNEL) {\n                    this.transports[Role.sub].api = ev.channel;\n                    this.transports[Role.pub].api = ev.channel;\n                    ev.channel.onmessage = (e) => {\n                        try {\n                            const msg = JSON.parse(e.data);\n                            this.processChannelMessage(msg);\n                        }\n                        catch (err) {\n                            /* tslint:disable-next-line:no-console */\n                            console.error(err);\n                        }\n                    };\n                    resolve();\n                    return;\n                }\n                if (this.ondatachannel) {\n                    this.ondatachannel(ev);\n                }\n            };\n        });\n        const offer = await this.transports[Role.pub].pc.createOffer();\n        await this.transports[Role.pub].pc.setLocalDescription(offer);\n        const answer = await this.signal.join(sid, uid, offer, joinConfig);\n        await this.transports[Role.pub].pc.setRemoteDescription(answer);\n        this.transports[Role.pub].candidates.forEach((c) => this.transports[Role.pub].pc.addIceCandidate(c));\n        this.transports[Role.pub].pc.onnegotiationneeded = this.onNegotiationNeeded.bind(this);\n        return apiReady;\n    }\n    pubsub(pubsub) {\n        if (this.signal) {\n            this.signal.pubsub(pubsub);\n        }\n    }\n    leave() {\n        if (this.transports) {\n            Object.values(this.transports).forEach((t) => t.pc.close());\n            delete this.transports;\n        }\n    }\n    getPubStats(selector) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        return this.transports[Role.pub].pc.getStats(selector);\n    }\n    getSubStats(selector) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        return this.transports[Role.sub].pc.getStats(selector);\n    }\n    publish(stream) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        stream.publish(this.transports[Role.pub]);\n    }\n    createDataChannel(label) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        return this.transports[Role.pub].pc.createDataChannel(label);\n    }\n    close() {\n        if (this.transports) {\n            Object.values(this.transports).forEach((t) => t.pc.close());\n        }\n        this.signal.close();\n    }\n    trickle({ candidate, target }) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        if (this.transports[target].pc.remoteDescription) {\n            this.transports[target].pc.addIceCandidate(candidate);\n        }\n        else {\n            this.transports[target].candidates.push(candidate);\n        }\n    }\n    async negotiate(description) {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        let answer;\n        try {\n            await this.transports[Role.sub].pc.setRemoteDescription(description);\n            this.transports[Role.sub].candidates.forEach((c) => this.transports[Role.sub].pc.addIceCandidate(c));\n            this.transports[Role.sub].candidates = [];\n            answer = await this.transports[Role.sub].pc.createAnswer();\n            await this.transports[Role.sub].pc.setLocalDescription(answer);\n            this.signal.answer(answer);\n        }\n        catch (err) {\n            /* tslint:disable-next-line:no-console */\n            console.error(err);\n            if (this.onerrnegotiate)\n                this.onerrnegotiate(Role.sub, err, description, answer);\n        }\n    }\n    async onNegotiationNeeded() {\n        if (!this.transports) {\n            throw Error(ERR_NO_SESSION);\n        }\n        let offer;\n        let answer;\n        try {\n            offer = await this.transports[Role.pub].pc.createOffer();\n            await this.transports[Role.pub].pc.setLocalDescription(offer);\n            answer = await this.signal.offer(offer);\n            await this.transports[Role.pub].pc.setRemoteDescription(answer);\n        }\n        catch (err) {\n            /* tslint:disable-next-line:no-console */\n            console.error(err);\n            if (this.onerrnegotiate)\n                this.onerrnegotiate(Role.pub, err, offer, answer);\n        }\n    }\n    processChannelMessage(msg) {\n        if (msg.method !== undefined && msg.params !== undefined) {\n            switch (msg.method) {\n                case 'audioLevels':\n                    if (this.onspeaker) {\n                        this.onspeaker(msg.params);\n                    }\n                    break;\n                case 'activeLayer':\n                    if (this.onactivelayer) {\n                        this.onactivelayer(msg.params);\n                    }\n                    break;\n                default:\n                // do nothing\n            }\n        }\n        else {\n            // legacy channel message - payload contains audio levels\n            if (this.onspeaker) {\n                this.onspeaker(msg);\n            }\n        }\n    }\n}\nexports.default = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")
}]);
